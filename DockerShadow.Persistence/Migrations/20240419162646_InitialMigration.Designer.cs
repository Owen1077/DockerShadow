// <auto-generated />
using System;
using DockerShadow.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace DockerShadow.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240419162646_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("NEXTGEN")
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 30);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DockerShadow.Domain.Entities.BankToBrokerFundWalletLog", b =>
                {
                    b.Property<long>("Id")
                        .HasPrecision(19)
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    b.Property<string>("Amount")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("AMOUNT");

                    b.Property<int?>("Attempts")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ATTEMPTS");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ");

                    b.Property<string>("DebitAccountNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("DEBIT_ACCOUNT_NUMBER");

                    b.Property<string>("JobHostName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("JOB_HOST_NAME");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasPrecision(6)
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<string>("OriginHostName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("ORIGIN_HOST_NAME");

                    b.Property<string>("ResponseCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("RESPONSE_CODE");

                    b.Property<string>("ResponseMessage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("RESPONSE_MESSAGE");

                    b.Property<int?>("RvslResponseCode")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("RVSL_RESPONSE_CODE");

                    b.Property<string>("RvslResponseMessage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("RVSL_RESPONSE_MESSAGE");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("STATUS");

                    b.Property<string>("TransactionReference")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("TRANSACTION_REFERENCE");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id")
                        .HasName("SYS_C0085666");

                    b.HasIndex(new[] { "TransactionReference" }, "UK_HBME2K5L418JJ4RNA4JBL3UJ8")
                        .IsUnique()
                        .HasFilter("\"TRANSACTION_REFERENCE\" IS NOT NULL");

                    b.ToTable("BANK_TO_BROKER_FUND_WALLET_LOG", "NEXTGEN", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("DockerShadow.Domain.Entities.BankToBrokerLog", b =>
                {
                    b.Property<long>("Id")
                        .HasPrecision(19)
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("ACCOUNT_NUMBER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id")
                        .HasName("SYS_C0085569");

                    b.ToTable("BANK_TO_BROKER_LOG", "NEXTGEN", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("DockerShadow.Domain.Entities.BankToBrokerWithdrawalLog", b =>
                {
                    b.Property<long>("Id")
                        .HasPrecision(19)
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("ID");

                    b.Property<string>("Amount")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("CREATED_DATE")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ");

                    b.Property<string>("CreditAccountNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("CREDIT_ACCOUNT_NUMBER");

                    b.Property<string>("EsbResponse")
                        .HasColumnType("CLOB")
                        .HasColumnName("ESB_RESPONSE");

                    b.Property<string>("OriginHostName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("ORIGIN_HOST_NAME");

                    b.Property<int?>("ResponseCode")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("RESPONSE_CODE");

                    b.Property<string>("ResponseMessage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("RESPONSE_MESSAGE");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("STATUS");

                    b.Property<string>("TransactionReference")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("TRANSACTION_REFERENCE");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(255)")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id")
                        .HasName("SYS_C0085728");

                    b.HasIndex(new[] { "TransactionReference" }, "UK_FHJMOY6SLGTK2ISVAJQVKOU62")
                        .IsUnique()
                        .HasFilter("\"TRANSACTION_REFERENCE\" IS NOT NULL");

                    b.ToTable("BANK_TO_BROKER_WITHDRAWAL_LOG", "NEXTGEN", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("DockerShadow.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("CONCURRENCY_STAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("NAME");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("NORMALIZED_NAME");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("\"NORMALIZED_NAME\" IS NOT NULL");

                    b.ToTable("CPOT_ROLE", "NEXTGEN");

                    b.HasData(
                        new
                        {
                            Id = "510057bf-a91a-4398-83e7-58a558ae5edd",
                            ConcurrencyStamp = "71f781f7-e957-469b-96df-9f2035147a23",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "76cdb59e-48da-4651-b300-a20e9c08a750",
                            ConcurrencyStamp = "71f781f7-e957-469b-96df-9f2035147a56",
                            Name = "Log",
                            NormalizedName = "LOG"
                        });
                });

            modelBuilder.Entity("DockerShadow.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("ID");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ACCESS_FAILED_COUNT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("CONCURRENCY_STAMP");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("EMAIL");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EMAIL_CONFIRMED");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("IS_LOGGED_IN");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("LAST_LOGIN_TIME");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("LOCKOUT_ENABLED");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE")
                        .HasColumnName("LOCKOUT_END");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("NAME");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("NORMALIZED_EMAIL");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("NORMALIZED_USER_NAME");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("PHONE_NUMBER_CONFIRMED");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("SECURITY_STAMP");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("STATUS");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("TWO_FACTOR_ENABLED");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("\"NORMALIZED_USER_NAME\" IS NOT NULL");

                    b.ToTable("CPOT_USER", "NEXTGEN");

                    b.HasData(
                        new
                        {
                            Id = "7cc5cd62-6240-44e5-b44f-bff0ae73342",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71f781f7-e957-469b-96df-9f2035147e45",
                            CreatedAt = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Oluwatosin.Shada@ACCESSBANKPLC.com",
                            EmailConfirmed = true,
                            IsLoggedIn = false,
                            LastLoginTime = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Name = "Oluwatosin Shada",
                            NormalizedEmail = "OLUWATOSIN.SHADA@ACCESSBANKPLC.COM",
                            NormalizedUserName = "SHADAO",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "71f781f7-e957-469b-96df-9f2035147e93",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "shadao"
                        },
                        new
                        {
                            Id = "9a6a928b-0e11-4d5d-8a29-b8f04445e72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71f781f7-e957-469b-96df-9f2035147e98",
                            CreatedAt = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Thelma.Ohue@ACCESSBANKPLC.com",
                            EmailConfirmed = true,
                            IsLoggedIn = false,
                            LastLoginTime = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Name = "Thelma Ohue",
                            NormalizedEmail = "THELMA.OHUE@ACCESSBANKPLC.COM",
                            NormalizedUserName = "OHUET",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "71f781f7-e957-469b-96df-9f2035147e37",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "ohuet"
                        });
                });

            modelBuilder.Entity("DockerShadow.Domain.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("USER_ID");

                    b.Property<string>("RoleId")
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("CPOT_USER_ROLES", "NEXTGEN");

                    b.HasData(
                        new
                        {
                            UserId = "9a6a928b-0e11-4d5d-8a29-b8f04445e72",
                            RoleId = "76cdb59e-48da-4651-b300-a20e9c08a750"
                        },
                        new
                        {
                            UserId = "7cc5cd62-6240-44e5-b44f-bff0ae73342",
                            RoleId = "510057bf-a91a-4398-83e7-58a558ae5edd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("CLAIM_TYPE");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("CLAIM_VALUE");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("CPOT_ROLE_CLAIMS", "NEXTGEN");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("CLAIM_TYPE");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("CLAIM_VALUE");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CPOT_USER_CLAIMS", "NEXTGEN");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("LOGIN_PROVIDER");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("PROVIDER_KEY");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("PROVIDER_DISPLAY_NAME");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("USER_ID");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("CPOT_USER_LOGINS", "NEXTGEN");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("USER_ID");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("LOGIN_PROVIDER");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("NAME");

                    b.Property<string>("Value")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("VALUE");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("CPOT_USER_TOKENS", "NEXTGEN");
                });

            modelBuilder.Entity("DockerShadow.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("DockerShadow.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DockerShadow.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DockerShadow.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DockerShadow.Domain.Entities.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DockerShadow.Domain.Entities.User", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DockerShadow.Domain.Entities.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DockerShadow.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DockerShadow.Domain.Entities.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
